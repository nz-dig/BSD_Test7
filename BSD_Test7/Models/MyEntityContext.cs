 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;

namespace BSD_Test7.Models 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	private static readonly EntityMappingStore TypeMappings;
    	
    	static MyEntityContext() 
    	{
    		TypeMappings = new EntityMappingStore();
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(TypeMappings, typeof(BSD_Test7.Models.ICharacter));
    		TypeMappings.SetImplMapping<BSD_Test7.Models.ICharacter, BSD_Test7.Models.Character>();
    		provider.AddMappingsForType(TypeMappings, typeof(BSD_Test7.Models.ICredit));
    		TypeMappings.SetImplMapping<BSD_Test7.Models.ICredit, BSD_Test7.Models.Credit>();
    		provider.AddMappingsForType(TypeMappings, typeof(BSD_Test7.Models.IPerson));
    		TypeMappings.SetImplMapping<BSD_Test7.Models.IPerson, BSD_Test7.Models.Person>();
    		provider.AddMappingsForType(TypeMappings, typeof(BSD_Test7.Models.IProduction));
    		TypeMappings.SetImplMapping<BSD_Test7.Models.IProduction, BSD_Test7.Models.Production>();
    		provider.AddMappingsForType(TypeMappings, typeof(BSD_Test7.Models.IRole));
    		TypeMappings.SetImplMapping<BSD_Test7.Models.IRole, BSD_Test7.Models.Role>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore, EntityMappingStore typeMappings = null) : base(typeMappings ?? TypeMappings, dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null,
            EntityMappingStore typeMappings = null
        ) : base(typeMappings ?? TypeMappings, connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(EntityMappingStore typeMappings = null) : base(typeMappings ?? TypeMappings)
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
        /// <param name="typeMappings">OPTIONAL: A <see cref="EntityMappingStore"/> that overrides the default mappings generated by reflection.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri,
            EntityMappingStore typeMappings = null
    	) : base(typeMappings ?? TypeMappings, updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Characters = 	new BrightstarEntitySet<BSD_Test7.Models.ICharacter>(this);
    		Credits = 	new BrightstarEntitySet<BSD_Test7.Models.ICredit>(this);
    		Persons = 	new BrightstarEntitySet<BSD_Test7.Models.IPerson>(this);
    		Productions = 	new BrightstarEntitySet<BSD_Test7.Models.IProduction>(this);
    		Roles = 	new BrightstarEntitySet<BSD_Test7.Models.IRole>(this);
    	}
    	
    	public IEntitySet<BSD_Test7.Models.ICharacter> Characters
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BSD_Test7.Models.ICredit> Credits
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BSD_Test7.Models.IPerson> Persons
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BSD_Test7.Models.IProduction> Productions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<BSD_Test7.Models.IRole> Roles
    	{
    		get; private set;
    	}
    	
    }
}
namespace BSD_Test7.Models 
{
    
    public partial class Character : BrightstarEntityObject, ICharacter 
    {
    	public Character(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Character() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BSD_Test7.Models.ICharacter
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	public System.Collections.Generic.ICollection<BSD_Test7.Models.IRole> Role
    	{
    		get { return GetRelatedObjects<BSD_Test7.Models.IRole>("Role"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Role", value); }
    								}
    	#endregion
    }
}
namespace BSD_Test7.Models 
{
    
    public partial class Credit : BrightstarEntityObject, ICredit 
    {
    	public Credit(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Credit() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BSD_Test7.Models.ICredit
    
    	public System.String Label
    	{
            		get { return GetRelatedProperty<System.String>("Label"); }
            		set { SetRelatedProperty("Label", value); }
    	}
    	public System.Collections.Generic.ICollection<BSD_Test7.Models.IRole> Role
    	{
    		get { return GetRelatedObjects<BSD_Test7.Models.IRole>("Role"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Role", value); }
    								}
    	#endregion
    }
}
namespace BSD_Test7.Models 
{
    
    public partial class Person : BrightstarEntityObject, IPerson 
    {
    	public Person(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Person() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BSD_Test7.Models.IPerson
    
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    
    	public System.String Nickname
    	{
            		get { return GetRelatedProperty<System.String>("Nickname"); }
            		set { SetRelatedProperty("Nickname", value); }
    	}
    
    	public System.String FirstName
    	{
            		get { return GetRelatedProperty<System.String>("FirstName"); }
            		set { SetRelatedProperty("FirstName", value); }
    	}
    
    	public System.String LastName
    	{
            		get { return GetRelatedProperty<System.String>("LastName"); }
            		set { SetRelatedProperty("LastName", value); }
    	}
    	public System.Collections.Generic.ICollection<BSD_Test7.Models.IProduction> Productions
    	{
    		get { return GetRelatedObjects<BSD_Test7.Models.IProduction>("Productions"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Productions", value); }
    								}
    	public System.Collections.Generic.ICollection<BSD_Test7.Models.IRole> Roles
    	{
    		get { return GetRelatedObjects<BSD_Test7.Models.IRole>("Roles"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Roles", value); }
    								}
    	#endregion
    }
}
namespace BSD_Test7.Models 
{
    
    public partial class Production : BrightstarEntityObject, IProduction 
    {
    	public Production(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Production() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BSD_Test7.Models.IProduction
    
    	public System.String Title
    	{
            		get { return GetRelatedProperty<System.String>("Title"); }
            		set { SetRelatedProperty("Title", value); }
    	}
    	public System.Collections.Generic.ICollection<BSD_Test7.Models.IRole> Role
    	{
    		get { return GetRelatedObjects<BSD_Test7.Models.IRole>("Role"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Role", value); }
    								}
    	public System.Collections.Generic.ICollection<BSD_Test7.Models.IPerson> Performers
    	{
    		get { return GetRelatedObjects<BSD_Test7.Models.IPerson>("Performers"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Performers", value); }
    								}
    	#endregion
    }
}
namespace BSD_Test7.Models 
{
    
    public partial class Role : BrightstarEntityObject, IRole 
    {
    	public Role(BrightstarEntityContext context, IDataObject dataObject) : base(context, dataObject) { }
    	public Role() : base() { }
    	public System.String Id { get {return GetIdentity(); } set { SetIdentity(value); } }
    	#region Implementation of BSD_Test7.Models.IRole
    
    	public BSD_Test7.Models.IProduction Production
    	{
            get { return GetRelatedObject<BSD_Test7.Models.IProduction>("Production"); }
            set { SetRelatedObject<BSD_Test7.Models.IProduction>("Production", value); }
    	}
    
    	public BSD_Test7.Models.ICharacter Character
    	{
            get { return GetRelatedObject<BSD_Test7.Models.ICharacter>("Character"); }
            set { SetRelatedObject<BSD_Test7.Models.ICharacter>("Character", value); }
    	}
    
    	public BSD_Test7.Models.ICredit Credit
    	{
            get { return GetRelatedObject<BSD_Test7.Models.ICredit>("Credit"); }
            set { SetRelatedObject<BSD_Test7.Models.ICredit>("Credit", value); }
    	}
    	public System.Collections.Generic.ICollection<BSD_Test7.Models.IPerson> PerformedBy
    	{
    		get { return GetRelatedObjects<BSD_Test7.Models.IPerson>("PerformedBy"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("PerformedBy", value); }
    								}
    	#endregion
    }
}
namespace BSD_Test7.Models 
{
    	public interface IDbContext: IDisposable
        {
            IEntitySet<T> EntitySet<T>();
            void SaveChanges();
    		T GetById<T>(string id);
    		void DeleteObject(object objectToDelete);
    
        }
    
    	public partial class MyEntityContext : IDbContext 
    	{}
    
    
    	public partial class MyEntityContext 
    	{	
    		public IEntitySet<T> EntitySet<T>()
            {
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.ICharacter)))
                {
                    return (IEntitySet<T>)this.Characters;
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.ICredit)))
                {
                    return (IEntitySet<T>)this.Credits;
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.IPerson)))
                {
                    return (IEntitySet<T>)this.Persons;
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.IProduction)))
                {
                    return (IEntitySet<T>)this.Productions;
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.IRole)))
                {
                    return (IEntitySet<T>)this.Roles;
                }
    					 throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
    		}
    	}
    
    
    	public partial class MyEntityContext 
    	{	
    		public T GetById<T>(string id)
            {
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.ICharacter)))
                {
                    return (T)this.Characters.FirstOrDefault(x => x.Id == id);
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.ICredit)))
                {
                    return (T)this.Credits.FirstOrDefault(x => x.Id == id);
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.IPerson)))
                {
                    return (T)this.Persons.FirstOrDefault(x => x.Id == id);
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.IProduction)))
                {
                    return (T)this.Productions.FirstOrDefault(x => x.Id == id);
                }
    					if (typeof(T).Equals(typeof(BSD_Test7.Models.IRole)))
                {
                    return (T)this.Roles.FirstOrDefault(x => x.Id == id);
                }
    					 throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
    		}
    	}
    	
    
}
